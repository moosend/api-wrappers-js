/**
 * Moosend API
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddingMultipleSubscribersRequest', 'model/AddingMultipleSubscribersResponse', 'model/AddingSubscribersRequest', 'model/AddingSubscribersResponse', 'model/GetSubscriberByEmailAddressResponse', 'model/GetSubscriberByIdResponse', 'model/GettingSubscribersResponse', 'model/RemovingASubscriberRequest', 'model/RemovingASubscriberResponse', 'model/RemovingMultipleSubscribersRequest', 'model/RemovingMultipleSubscribersResponse', 'model/UnsubscribingSubscribersFromAccountRequest', 'model/UnsubscribingSubscribersFromAccountResponse', 'model/UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest', 'model/UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse', 'model/UnsubscribingSubscribersFromMailingListRequest', 'model/UnsubscribingSubscribersFromMailingListResponse', 'model/UpdatingASubscriberRequest', 'model/UpdatingASubscriberResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddingMultipleSubscribersRequest'), require('../model/AddingMultipleSubscribersResponse'), require('../model/AddingSubscribersRequest'), require('../model/AddingSubscribersResponse'), require('../model/GetSubscriberByEmailAddressResponse'), require('../model/GetSubscriberByIdResponse'), require('../model/GettingSubscribersResponse'), require('../model/RemovingASubscriberRequest'), require('../model/RemovingASubscriberResponse'), require('../model/RemovingMultipleSubscribersRequest'), require('../model/RemovingMultipleSubscribersResponse'), require('../model/UnsubscribingSubscribersFromAccountRequest'), require('../model/UnsubscribingSubscribersFromAccountResponse'), require('../model/UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest'), require('../model/UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse'), require('../model/UnsubscribingSubscribersFromMailingListRequest'), require('../model/UnsubscribingSubscribersFromMailingListResponse'), require('../model/UpdatingASubscriberRequest'), require('../model/UpdatingASubscriberResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.MoosendApi) {
      root.MoosendApi = {};
    }
    root.MoosendApi.SubscribersApi = factory(root.MoosendApi.ApiClient, root.MoosendApi.AddingMultipleSubscribersRequest, root.MoosendApi.AddingMultipleSubscribersResponse, root.MoosendApi.AddingSubscribersRequest, root.MoosendApi.AddingSubscribersResponse, root.MoosendApi.GetSubscriberByEmailAddressResponse, root.MoosendApi.GetSubscriberByIdResponse, root.MoosendApi.GettingSubscribersResponse, root.MoosendApi.RemovingASubscriberRequest, root.MoosendApi.RemovingASubscriberResponse, root.MoosendApi.RemovingMultipleSubscribersRequest, root.MoosendApi.RemovingMultipleSubscribersResponse, root.MoosendApi.UnsubscribingSubscribersFromAccountRequest, root.MoosendApi.UnsubscribingSubscribersFromAccountResponse, root.MoosendApi.UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest, root.MoosendApi.UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse, root.MoosendApi.UnsubscribingSubscribersFromMailingListRequest, root.MoosendApi.UnsubscribingSubscribersFromMailingListResponse, root.MoosendApi.UpdatingASubscriberRequest, root.MoosendApi.UpdatingASubscriberResponse);
  }
}(this, function(ApiClient, AddingMultipleSubscribersRequest, AddingMultipleSubscribersResponse, AddingSubscribersRequest, AddingSubscribersResponse, GetSubscriberByEmailAddressResponse, GetSubscriberByIdResponse, GettingSubscribersResponse, RemovingASubscriberRequest, RemovingASubscriberResponse, RemovingMultipleSubscribersRequest, RemovingMultipleSubscribersResponse, UnsubscribingSubscribersFromAccountRequest, UnsubscribingSubscribersFromAccountResponse, UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest, UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse, UnsubscribingSubscribersFromMailingListRequest, UnsubscribingSubscribersFromMailingListResponse, UpdatingASubscriberRequest, UpdatingASubscriberResponse) {
  'use strict';

  /**
   * Subscribers service.
   * @module api/SubscribersApi
   * @version 1.0
   */

  /**
   * Constructs a new SubscribersApi. 
   * @alias module:api/SubscribersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addingMultipleSubscribers operation.
     * @callback module:api/SubscribersApi~addingMultipleSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddingMultipleSubscribersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adding multiple subscribers
     * This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} mailingListID The ID of the mailing list to add subscribers to.
     * @param {module:model/AddingMultipleSubscribersRequest} body 
     * @param {module:api/SubscribersApi~addingMultipleSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddingMultipleSubscribersResponse}
     */
    this.addingMultipleSubscribers = function(format, apikey, mailingListID, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling addingMultipleSubscribers");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling addingMultipleSubscribers");
      }

      // verify the required parameter 'mailingListID' is set
      if (mailingListID === undefined || mailingListID === null) {
        throw new Error("Missing the required parameter 'mailingListID' when calling addingMultipleSubscribers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addingMultipleSubscribers");
      }


      var pathParams = {
        'Format': format,
        'MailingListID': mailingListID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AddingMultipleSubscribersResponse;

      return this.apiClient.callApi(
        '/subscribers/{MailingListID}/subscribe_many.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addingSubscribers operation.
     * @callback module:api/SubscribersApi~addingSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddingSubscribersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adding subscribers
     * Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
     * @param {module:model/String} format 
     * @param {String} mailingListID The ID of the mailing list to add the new member.
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {module:model/AddingSubscribersRequest} body 
     * @param {module:api/SubscribersApi~addingSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddingSubscribersResponse}
     */
    this.addingSubscribers = function(format, mailingListID, apikey, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling addingSubscribers");
      }

      // verify the required parameter 'mailingListID' is set
      if (mailingListID === undefined || mailingListID === null) {
        throw new Error("Missing the required parameter 'mailingListID' when calling addingSubscribers");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling addingSubscribers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addingSubscribers");
      }


      var pathParams = {
        'Format': format,
        'MailingListID': mailingListID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AddingSubscribersResponse;

      return this.apiClient.callApi(
        '/subscribers/{MailingListID}/subscribe.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriberByEmailAddress operation.
     * @callback module:api/SubscribersApi~getSubscriberByEmailAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSubscriberByEmailAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get subscriber by email address
     * Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} mailingListID The ID of the mailing list where the subscriber belongs.
     * @param {String} email The email of the subscriber.
     * @param {module:api/SubscribersApi~getSubscriberByEmailAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSubscriberByEmailAddressResponse}
     */
    this.getSubscriberByEmailAddress = function(format, apikey, mailingListID, email, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getSubscriberByEmailAddress");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getSubscriberByEmailAddress");
      }

      // verify the required parameter 'mailingListID' is set
      if (mailingListID === undefined || mailingListID === null) {
        throw new Error("Missing the required parameter 'mailingListID' when calling getSubscriberByEmailAddress");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getSubscriberByEmailAddress");
      }


      var pathParams = {
        'Format': format,
        'MailingListID': mailingListID
      };
      var queryParams = {
        'apikey': apikey,
        'Email': email
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSubscriberByEmailAddressResponse;

      return this.apiClient.callApi(
        '/subscribers/{MailingListID}/view.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriberById operation.
     * @callback module:api/SubscribersApi~getSubscriberByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSubscriberByIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get subscriber by id
     * Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} mailingListID The ID of the mailing list to search the subscriber in.
     * @param {String} subscriberID The id of the subscriber being searched.
     * @param {module:api/SubscribersApi~getSubscriberByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSubscriberByIdResponse}
     */
    this.getSubscriberById = function(format, apikey, mailingListID, subscriberID, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getSubscriberById");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getSubscriberById");
      }

      // verify the required parameter 'mailingListID' is set
      if (mailingListID === undefined || mailingListID === null) {
        throw new Error("Missing the required parameter 'mailingListID' when calling getSubscriberById");
      }

      // verify the required parameter 'subscriberID' is set
      if (subscriberID === undefined || subscriberID === null) {
        throw new Error("Missing the required parameter 'subscriberID' when calling getSubscriberById");
      }


      var pathParams = {
        'Format': format,
        'MailingListID': mailingListID,
        'SubscriberID': subscriberID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSubscriberByIdResponse;

      return this.apiClient.callApi(
        '/subscribers/{MailingListID}/find/{SubscriberID}.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the gettingSubscribers operation.
     * @callback module:api/SubscribersApi~gettingSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GettingSubscribersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Getting subscribers
     * Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
     * @param {module:model/String} format 
     * @param {String} mailingListID The ID of the mailing list where the subscribers belong.
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {module:model/String} status Specifies what type of subscriber statistics results will be returned.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Specifies the page of subscriber statistics results will be returned.
     * @param {Number} opts.pageSize Specifies the page size of subscriber statistics results will be returned.
     * @param {module:api/SubscribersApi~gettingSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GettingSubscribersResponse}
     */
    this.gettingSubscribers = function(format, mailingListID, apikey, status, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gettingSubscribers");
      }

      // verify the required parameter 'mailingListID' is set
      if (mailingListID === undefined || mailingListID === null) {
        throw new Error("Missing the required parameter 'mailingListID' when calling gettingSubscribers");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling gettingSubscribers");
      }

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling gettingSubscribers");
      }


      var pathParams = {
        'Format': format,
        'MailingListID': mailingListID,
        'Status': status
      };
      var queryParams = {
        'apikey': apikey,
        'Page': opts['page'],
        'PageSize': opts['pageSize']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GettingSubscribersResponse;

      return this.apiClient.callApi(
        '/lists/{MailingListID}/subscribers/{Status}.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removingASubscriber operation.
     * @callback module:api/SubscribersApi~removingASubscriberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemovingASubscriberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removing a subscriber
     * Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} mailingListID The ID of the mailing list to remove the subscriber from.
     * @param {module:model/RemovingASubscriberRequest} body 
     * @param {module:api/SubscribersApi~removingASubscriberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemovingASubscriberResponse}
     */
    this.removingASubscriber = function(format, apikey, mailingListID, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling removingASubscriber");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling removingASubscriber");
      }

      // verify the required parameter 'mailingListID' is set
      if (mailingListID === undefined || mailingListID === null) {
        throw new Error("Missing the required parameter 'mailingListID' when calling removingASubscriber");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removingASubscriber");
      }


      var pathParams = {
        'Format': format,
        'MailingListID': mailingListID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RemovingASubscriberResponse;

      return this.apiClient.callApi(
        '/subscribers/{MailingListID}/remove.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removingMultipleSubscribers operation.
     * @callback module:api/SubscribersApi~removingMultipleSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemovingMultipleSubscribersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removing multiple subscribers
     * Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} mailingListID The ID of the mailing list to remove the subscribers from.
     * @param {module:model/RemovingMultipleSubscribersRequest} body 
     * @param {module:api/SubscribersApi~removingMultipleSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemovingMultipleSubscribersResponse}
     */
    this.removingMultipleSubscribers = function(format, apikey, mailingListID, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling removingMultipleSubscribers");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling removingMultipleSubscribers");
      }

      // verify the required parameter 'mailingListID' is set
      if (mailingListID === undefined || mailingListID === null) {
        throw new Error("Missing the required parameter 'mailingListID' when calling removingMultipleSubscribers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removingMultipleSubscribers");
      }


      var pathParams = {
        'Format': format,
        'MailingListID': mailingListID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RemovingMultipleSubscribersResponse;

      return this.apiClient.callApi(
        '/subscribers/{MailingListID}/remove_many.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribingSubscribersFromAccount operation.
     * @callback module:api/SubscribersApi~unsubscribingSubscribersFromAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnsubscribingSubscribersFromAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribing subscribers from account
     * Unsubscribes a subscriber from the account.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {module:model/UnsubscribingSubscribersFromAccountRequest} body 
     * @param {module:api/SubscribersApi~unsubscribingSubscribersFromAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnsubscribingSubscribersFromAccountResponse}
     */
    this.unsubscribingSubscribersFromAccount = function(format, apikey, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling unsubscribingSubscribersFromAccount");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling unsubscribingSubscribersFromAccount");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling unsubscribingSubscribersFromAccount");
      }


      var pathParams = {
        'Format': format
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UnsubscribingSubscribersFromAccountResponse;

      return this.apiClient.callApi(
        '/subscribers/unsubscribe.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribingSubscribersFromMailingList operation.
     * @callback module:api/SubscribersApi~unsubscribingSubscribersFromMailingListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnsubscribingSubscribersFromMailingListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribing subscribers from mailing list
     * Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} mailingListID The ID of the mailing list to add subscribers to.
     * @param {module:model/UnsubscribingSubscribersFromMailingListRequest} body 
     * @param {module:api/SubscribersApi~unsubscribingSubscribersFromMailingListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnsubscribingSubscribersFromMailingListResponse}
     */
    this.unsubscribingSubscribersFromMailingList = function(format, apikey, mailingListID, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling unsubscribingSubscribersFromMailingList");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling unsubscribingSubscribersFromMailingList");
      }

      // verify the required parameter 'mailingListID' is set
      if (mailingListID === undefined || mailingListID === null) {
        throw new Error("Missing the required parameter 'mailingListID' when calling unsubscribingSubscribersFromMailingList");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling unsubscribingSubscribersFromMailingList");
      }


      var pathParams = {
        'Format': format,
        'MailingListID': mailingListID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UnsubscribingSubscribersFromMailingListResponse;

      return this.apiClient.callApi(
        '/subscribers/{MailingListID}/unsubscribe.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribingSubscribersFromMailingListAndASpecifiedCampaign operation.
     * @callback module:api/SubscribersApi~unsubscribingSubscribersFromMailingListAndASpecifiedCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribing subscribers from mailing list and a specified campaign
     * Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
     * @param {module:model/String} format 
     * @param {String} campaignID The ID of the campaign that was sent to the specific mailing list.
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} mailingListID The ID of the mailing list to remove the subscriber from.
     * @param {module:model/UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest} body 
     * @param {module:api/SubscribersApi~unsubscribingSubscribersFromMailingListAndASpecifiedCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse}
     */
    this.unsubscribingSubscribersFromMailingListAndASpecifiedCampaign = function(format, campaignID, apikey, mailingListID, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling unsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling unsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling unsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
      }

      // verify the required parameter 'mailingListID' is set
      if (mailingListID === undefined || mailingListID === null) {
        throw new Error("Missing the required parameter 'mailingListID' when calling unsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling unsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID,
        'MailingListID': mailingListID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse;

      return this.apiClient.callApi(
        '/subscribers/{MailingListID}/{CampaignID}/unsubscribe.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatingASubscriber operation.
     * @callback module:api/SubscribersApi~updatingASubscriberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatingASubscriberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating a subscriber
     * Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} mailingListID The ID of the mailing list that contains the subscriber
     * @param {String} subscriberID The id of the subscriber to be updated
     * @param {module:model/UpdatingASubscriberRequest} body 
     * @param {module:api/SubscribersApi~updatingASubscriberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatingASubscriberResponse}
     */
    this.updatingASubscriber = function(format, apikey, mailingListID, subscriberID, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling updatingASubscriber");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling updatingASubscriber");
      }

      // verify the required parameter 'mailingListID' is set
      if (mailingListID === undefined || mailingListID === null) {
        throw new Error("Missing the required parameter 'mailingListID' when calling updatingASubscriber");
      }

      // verify the required parameter 'subscriberID' is set
      if (subscriberID === undefined || subscriberID === null) {
        throw new Error("Missing the required parameter 'subscriberID' when calling updatingASubscriber");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatingASubscriber");
      }


      var pathParams = {
        'Format': format,
        'MailingListID': mailingListID,
        'SubscriberID': subscriberID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdatingASubscriberResponse;

      return this.apiClient.callApi(
        '/subscribers/{MailingListID}/update/{SubscriberID}.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
