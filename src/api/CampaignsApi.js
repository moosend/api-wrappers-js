/**
 * Moosend API
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AbTestCampaignSummaryResponse', 'model/ActivityByLocationResponse', 'model/CampaignSummaryResponse', 'model/CloningAnExistingCampaignResponse', 'model/CreatingADraftCampaignRequest', 'model/CreatingADraftCampaignResponse', 'model/DeletingACampaignResponse', 'model/GetAllCampaignsResponse', 'model/GetCampaignStatisticsWithPagingFilteredResponse', 'model/GetCampaignsByPageAndPagesizeResponse', 'model/GetCampaignsByPageResponse', 'model/GettingAllYourSendersResponse', 'model/GettingCampaignDetailsResponse', 'model/GettingSenderDetailsResponse', 'model/LinkActivityResponse', 'model/SchedulingACampaignRequest', 'model/SchedulingACampaignResponse', 'model/SendingACampaignResponse', 'model/TestingACampaignRequest', 'model/TestingACampaignResponse', 'model/UnschedulingACampaignResponse', 'model/UpdatingADraftCampaignRequest', 'model/UpdatingADraftCampaignResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AbTestCampaignSummaryResponse'), require('../model/ActivityByLocationResponse'), require('../model/CampaignSummaryResponse'), require('../model/CloningAnExistingCampaignResponse'), require('../model/CreatingADraftCampaignRequest'), require('../model/CreatingADraftCampaignResponse'), require('../model/DeletingACampaignResponse'), require('../model/GetAllCampaignsResponse'), require('../model/GetCampaignStatisticsWithPagingFilteredResponse'), require('../model/GetCampaignsByPageAndPagesizeResponse'), require('../model/GetCampaignsByPageResponse'), require('../model/GettingAllYourSendersResponse'), require('../model/GettingCampaignDetailsResponse'), require('../model/GettingSenderDetailsResponse'), require('../model/LinkActivityResponse'), require('../model/SchedulingACampaignRequest'), require('../model/SchedulingACampaignResponse'), require('../model/SendingACampaignResponse'), require('../model/TestingACampaignRequest'), require('../model/TestingACampaignResponse'), require('../model/UnschedulingACampaignResponse'), require('../model/UpdatingADraftCampaignRequest'), require('../model/UpdatingADraftCampaignResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.MoosendApi) {
      root.MoosendApi = {};
    }
    root.MoosendApi.CampaignsApi = factory(root.MoosendApi.ApiClient, root.MoosendApi.AbTestCampaignSummaryResponse, root.MoosendApi.ActivityByLocationResponse, root.MoosendApi.CampaignSummaryResponse, root.MoosendApi.CloningAnExistingCampaignResponse, root.MoosendApi.CreatingADraftCampaignRequest, root.MoosendApi.CreatingADraftCampaignResponse, root.MoosendApi.DeletingACampaignResponse, root.MoosendApi.GetAllCampaignsResponse, root.MoosendApi.GetCampaignStatisticsWithPagingFilteredResponse, root.MoosendApi.GetCampaignsByPageAndPagesizeResponse, root.MoosendApi.GetCampaignsByPageResponse, root.MoosendApi.GettingAllYourSendersResponse, root.MoosendApi.GettingCampaignDetailsResponse, root.MoosendApi.GettingSenderDetailsResponse, root.MoosendApi.LinkActivityResponse, root.MoosendApi.SchedulingACampaignRequest, root.MoosendApi.SchedulingACampaignResponse, root.MoosendApi.SendingACampaignResponse, root.MoosendApi.TestingACampaignRequest, root.MoosendApi.TestingACampaignResponse, root.MoosendApi.UnschedulingACampaignResponse, root.MoosendApi.UpdatingADraftCampaignRequest, root.MoosendApi.UpdatingADraftCampaignResponse);
  }
}(this, function(ApiClient, AbTestCampaignSummaryResponse, ActivityByLocationResponse, CampaignSummaryResponse, CloningAnExistingCampaignResponse, CreatingADraftCampaignRequest, CreatingADraftCampaignResponse, DeletingACampaignResponse, GetAllCampaignsResponse, GetCampaignStatisticsWithPagingFilteredResponse, GetCampaignsByPageAndPagesizeResponse, GetCampaignsByPageResponse, GettingAllYourSendersResponse, GettingCampaignDetailsResponse, GettingSenderDetailsResponse, LinkActivityResponse, SchedulingACampaignRequest, SchedulingACampaignResponse, SendingACampaignResponse, TestingACampaignRequest, TestingACampaignResponse, UnschedulingACampaignResponse, UpdatingADraftCampaignRequest, UpdatingADraftCampaignResponse) {
  'use strict';

  /**
   * Campaigns service.
   * @module api/CampaignsApi
   * @version 1.0
   */

  /**
   * Constructs a new CampaignsApi. 
   * @alias module:api/CampaignsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the aBTestCampaignSummary operation.
     * @callback module:api/CampaignsApi~aBTestCampaignSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AbTestCampaignSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AB Test Campaign Summary
     * Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the requested AB test campaign
     * @param {module:api/CampaignsApi~aBTestCampaignSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AbTestCampaignSummaryResponse}
     */
    this.aBTestCampaignSummary = function(format, apikey, campaignID, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling aBTestCampaignSummary");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling aBTestCampaignSummary");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling aBTestCampaignSummary");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AbTestCampaignSummaryResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/view_ab_summary.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the activityByLocation operation.
     * @callback module:api/CampaignsApi~activityByLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityByLocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activity By Location
     * Returns a detailed report of your campaign opens (unique and total) by country.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the requested campaign
     * @param {module:api/CampaignsApi~activityByLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityByLocationResponse}
     */
    this.activityByLocation = function(format, apikey, campaignID, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling activityByLocation");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling activityByLocation");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling activityByLocation");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ActivityByLocationResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/stats/countries.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignSummary operation.
     * @callback module:api/CampaignsApi~campaignSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Campaign Summary
     * Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the requested campaign
     * @param {module:api/CampaignsApi~campaignSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignSummaryResponse}
     */
    this.campaignSummary = function(format, apikey, campaignID, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling campaignSummary");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling campaignSummary");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling campaignSummary");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CampaignSummaryResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/view_summary.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cloningAnExistingCampaign operation.
     * @callback module:api/CampaignsApi~cloningAnExistingCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloningAnExistingCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cloning An Existing Campaign
     * Creates an exact copy of an existing campaign. The new campaign is created as a draft.
     * @param {module:model/String} format 
     * @param {String} campaignID 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {module:api/CampaignsApi~cloningAnExistingCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloningAnExistingCampaignResponse}
     */
    this.cloningAnExistingCampaign = function(format, campaignID, apikey, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling cloningAnExistingCampaign");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling cloningAnExistingCampaign");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling cloningAnExistingCampaign");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CloningAnExistingCampaignResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/clone.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the creatingADraftCampaign operation.
     * @callback module:api/CampaignsApi~creatingADraftCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatingADraftCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creating A Draft Campaign
     * Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {module:model/CreatingADraftCampaignRequest} body 
     * @param {module:api/CampaignsApi~creatingADraftCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatingADraftCampaignResponse}
     */
    this.creatingADraftCampaign = function(format, apikey, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling creatingADraftCampaign");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling creatingADraftCampaign");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling creatingADraftCampaign");
      }


      var pathParams = {
        'Format': format
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreatingADraftCampaignResponse;

      return this.apiClient.callApi(
        '/campaigns/create.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletingACampaign operation.
     * @callback module:api/CampaignsApi~deletingACampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletingACampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deleting A Campaign
     * Deletes a campaign from your account, draft or even sent.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the draft campaign to update.
     * @param {module:api/CampaignsApi~deletingACampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletingACampaignResponse}
     */
    this.deletingACampaign = function(format, apikey, campaignID, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling deletingACampaign");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling deletingACampaign");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling deletingACampaign");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeletingACampaignResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/delete.{Format}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCampaigns operation.
     * @callback module:api/CampaignsApi~getAllCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Campaigns
     * Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {module:api/CampaignsApi~getAllCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllCampaignsResponse}
     */
    this.getAllCampaigns = function(format, apikey, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getAllCampaigns");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getAllCampaigns");
      }


      var pathParams = {
        'Format': format
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAllCampaignsResponse;

      return this.apiClient.callApi(
        '/campaigns.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignStatisticsWithPagingFiltered operation.
     * @callback module:api/CampaignsApi~getCampaignStatisticsWithPagingFilteredCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignStatisticsWithPagingFilteredResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Campaign Statistics With Paging &amp; Filtered
     * Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the requested AB test campaign
     * @param {module:model/String} type The type of the activity to display results for. This must be one of the following values : * Sent : To get information about when and to which recipients the campaign was sent. * Opened : To get information about who opened the campaign. * LinkClicked : To get information about who clicked on which link. * Forward : To get information about who forwarded the campaign using the relevant link on the email body and when. * Unsubscribed : To get information about who unsubscribed from the campaign by clicking on the unsubscribe link and when. * Bounced : To get information about which email recipients failed to receive the campaign. If not specified, the value Sent will be used by default.
     * @param {Object} opts Optional parameters
     * @param {String} opts.page The page number to display results for. If not specified, the first page will be returned.
     * @param {String} opts.pageSize The maximum number of results per page. This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.
     * @param {String} opts.from A date value that specifies since when to start returning results. If omitted, results will be returned from the moment the campaign was sent.
     * @param {String} opts.to A date value that specifies up to when to return results. If omitted, results will be returned up to date.
     * @param {module:api/CampaignsApi~getCampaignStatisticsWithPagingFilteredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignStatisticsWithPagingFilteredResponse}
     */
    this.getCampaignStatisticsWithPagingFiltered = function(format, apikey, campaignID, type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getCampaignStatisticsWithPagingFiltered");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getCampaignStatisticsWithPagingFiltered");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling getCampaignStatisticsWithPagingFiltered");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getCampaignStatisticsWithPagingFiltered");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID,
        'Type': type
      };
      var queryParams = {
        'apikey': apikey,
        'Page': opts['page'],
        'PageSize': opts['pageSize'],
        'From': opts['from'],
        'To': opts['to']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCampaignStatisticsWithPagingFilteredResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/stats/{Type}.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignsByPage operation.
     * @callback module:api/CampaignsApi~getCampaignsByPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignsByPageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Campaigns By Page
     * Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {Number} page The page number to display results for.
     * @param {module:api/CampaignsApi~getCampaignsByPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignsByPageResponse}
     */
    this.getCampaignsByPage = function(format, apikey, page, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getCampaignsByPage");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getCampaignsByPage");
      }

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getCampaignsByPage");
      }


      var pathParams = {
        'Format': format,
        'Page': page
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCampaignsByPageResponse;

      return this.apiClient.callApi(
        '/campaigns/{Page}.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignsByPageAndPagesize operation.
     * @callback module:api/CampaignsApi~getCampaignsByPageAndPagesizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignsByPageAndPagesizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Campaigns By Page And Pagesize
     * Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {Number} page The page number to display results for.
     * @param {Number} pageSize The maximum number of results per page.  This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.shortBy The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property
     * @param {module:model/String} opts.sortMethod The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed
     * @param {module:api/CampaignsApi~getCampaignsByPageAndPagesizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignsByPageAndPagesizeResponse}
     */
    this.getCampaignsByPageAndPagesize = function(format, apikey, page, pageSize, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getCampaignsByPageAndPagesize");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getCampaignsByPageAndPagesize");
      }

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getCampaignsByPageAndPagesize");
      }

      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getCampaignsByPageAndPagesize");
      }


      var pathParams = {
        'Format': format,
        'Page': page,
        'PageSize': pageSize
      };
      var queryParams = {
        'apikey': apikey,
        'ShortBy': opts['shortBy'],
        'SortMethod': opts['sortMethod']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCampaignsByPageAndPagesizeResponse;

      return this.apiClient.callApi(
        '/campaigns/{Page}/{PageSize}.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the gettingAllYourSenders operation.
     * @callback module:api/CampaignsApi~gettingAllYourSendersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GettingAllYourSendersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Getting All Your Senders
     * Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {module:api/CampaignsApi~gettingAllYourSendersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GettingAllYourSendersResponse}
     */
    this.gettingAllYourSenders = function(format, apikey, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gettingAllYourSenders");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling gettingAllYourSenders");
      }


      var pathParams = {
        'Format': format
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GettingAllYourSendersResponse;

      return this.apiClient.callApi(
        '/senders/find_all.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the gettingCampaignDetails operation.
     * @callback module:api/CampaignsApi~gettingCampaignDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GettingCampaignDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Getting Campaign Details
     * Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the requested campaign
     * @param {module:api/CampaignsApi~gettingCampaignDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GettingCampaignDetailsResponse}
     */
    this.gettingCampaignDetails = function(format, apikey, campaignID, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gettingCampaignDetails");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling gettingCampaignDetails");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling gettingCampaignDetails");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GettingCampaignDetailsResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/view.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the gettingSenderDetails operation.
     * @callback module:api/CampaignsApi~gettingSenderDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GettingSenderDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Getting Sender Details
     * Returns basic information for the specified sender identified by its email address.
     * @param {module:model/String} format 
     * @param {String} email 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {module:api/CampaignsApi~gettingSenderDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GettingSenderDetailsResponse}
     */
    this.gettingSenderDetails = function(format, email, apikey, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gettingSenderDetails");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling gettingSenderDetails");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling gettingSenderDetails");
      }


      var pathParams = {
        'Format': format
      };
      var queryParams = {
        'Email': email,
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GettingSenderDetailsResponse;

      return this.apiClient.callApi(
        '/senders/find_one.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the linkActivity operation.
     * @callback module:api/CampaignsApi~linkActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkActivityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link Activity
     * Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the requested campaign
     * @param {module:api/CampaignsApi~linkActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkActivityResponse}
     */
    this.linkActivity = function(format, apikey, campaignID, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling linkActivity");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling linkActivity");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling linkActivity");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LinkActivityResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/stats/links.{Format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulingACampaign operation.
     * @callback module:api/CampaignsApi~schedulingACampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchedulingACampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scheduling A Campaign
     * Assigns a scheduled date and time at which the campaign will be delivered.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the campaign to be scheduled
     * @param {module:model/SchedulingACampaignRequest} body 
     * @param {module:api/CampaignsApi~schedulingACampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchedulingACampaignResponse}
     */
    this.schedulingACampaign = function(format, apikey, campaignID, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling schedulingACampaign");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling schedulingACampaign");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling schedulingACampaign");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling schedulingACampaign");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SchedulingACampaignResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/schedule.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendingACampaign operation.
     * @callback module:api/CampaignsApi~sendingACampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendingACampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sending a campaign
     * Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the draft campaign to be sent.
     * @param {module:api/CampaignsApi~sendingACampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendingACampaignResponse}
     */
    this.sendingACampaign = function(format, apikey, campaignID, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling sendingACampaign");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling sendingACampaign");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling sendingACampaign");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SendingACampaignResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/send.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testingACampaign operation.
     * @callback module:api/CampaignsApi~testingACampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestingACampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Testing a campaign
     * Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the draft campaign to be tested.
     * @param {module:model/TestingACampaignRequest} body 
     * @param {module:api/CampaignsApi~testingACampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestingACampaignResponse}
     */
    this.testingACampaign = function(format, apikey, campaignID, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling testingACampaign");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling testingACampaign");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling testingACampaign");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling testingACampaign");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TestingACampaignResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/send_test.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unschedulingACampaign operation.
     * @callback module:api/CampaignsApi~unschedulingACampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnschedulingACampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unscheduling a campaign
     * Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the campaign to be scheduled
     * @param {module:api/CampaignsApi~unschedulingACampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnschedulingACampaignResponse}
     */
    this.unschedulingACampaign = function(format, apikey, campaignID, callback) {
      var postBody = null;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling unschedulingACampaign");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling unschedulingACampaign");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling unschedulingACampaign");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UnschedulingACampaignResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/unschedule.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatingADraftCampaign operation.
     * @callback module:api/CampaignsApi~updatingADraftCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatingADraftCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating A Draft Campaign
     * Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
     * @param {module:model/String} format 
     * @param {String} apikey You may find your API Key or generate a new one in your account settings.
     * @param {String} campaignID The ID of the draft campaign to update.
     * @param {module:model/UpdatingADraftCampaignRequest} body 
     * @param {module:api/CampaignsApi~updatingADraftCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatingADraftCampaignResponse}
     */
    this.updatingADraftCampaign = function(format, apikey, campaignID, body, callback) {
      var postBody = body;

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling updatingADraftCampaign");
      }

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling updatingADraftCampaign");
      }

      // verify the required parameter 'campaignID' is set
      if (campaignID === undefined || campaignID === null) {
        throw new Error("Missing the required parameter 'campaignID' when calling updatingADraftCampaign");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatingADraftCampaign");
      }


      var pathParams = {
        'Format': format,
        'CampaignID': campaignID
      };
      var queryParams = {
        'apikey': apikey
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdatingADraftCampaignResponse;

      return this.apiClient.callApi(
        '/campaigns/{CampaignID}/update.{Format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
